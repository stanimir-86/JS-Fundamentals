function processOddNumbers(arr) {
    let newArr = arr.filter((x, i) => i % 2 !== 0)//ще филтрираме нечетни числа(намират се на нечетен index)
    // и затова ползваме метода,като подаваме два параметъра x-value,i-index=>и пишем логиката да вземаме числа на нечетен индекс
    //тук не ползваме първия параметър x,а втория индекса
    //получаваме нов масив с [15,25]спрямо оргиналния.
    let dubleArr = newArr.map(x => x * 2);//искам да модифицирам всяко число ,като *2,от получения нов масив с нечетните индекси.
    let result = [];//резултат от предходната функция запазвам в нов масив

    for (let i = dubleArr.length - 1; i >= 0; i--) {//правя си обратен цикъл ,който да върти от зад напред спрямо променливата ,която съм създал и е присвоила масива с нечетните индекси
        result.push(dubleArr[i]);//в променливата result за новия масив,пушвам новите получени стойности,които вземам от dubleArr[i]

    }
    return result.join(" ");//запазвам си стойноста с return и разделям получените стойности с разстояни" "
}
console.log(processOddNumbers([10, 15, 20, 25]));

//второ решение:
// function processOddNumbers(arr) {
//     let newArr = arr цялата функция се пише на един ред,но заради четимост,пиша всяка на нов ред
//         .filter((x, i) => i % 2 !== 0)
//         .map(x => x * 2)
//         .reverse();
//     return newArr.join(" ");
// }

